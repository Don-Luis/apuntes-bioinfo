c("red", "blue")[gr]
c("red", "blue")[group]
c("red", "blue")[levels(group)]
c("red", "blue")[factor(levels(group))]
(m1 <- cbind(c(1, 3), c(2, 1)))
A <- matrix(1:15, nrow = 5)
A[1, ] ## first row
A[, 2] ## second column
A[4, 2] ## fourth row, second column
A[3, 2] <- 999
A[1, ] <- c(90, 91, 92)
A < 4
A[m1]
A[c(1, 3), c(2, 1)]
A[m1]
A
m1
A[c(2, 4), 1, drop = FALSE]
listA <- list(a = 1:5, b = letters[1:3])
listA[[1]]
listA[["a"]]
listA$a
listA[[1]][2]
listA[[1]][2]
listA[1]
(listB <- list(one.vector = 1:10,  hello = "Hola",
one.matrix = matrix(rnorm(20), ncol = 5),
another.list =
list(a = 5,
b = factor(c("male",
"female", "female")))))
listB[[c(3, 11)]]
listB[[3]][11]
listB[[3]][3, 3]
listB[[3]][c(3, 3)]
listB[c(3, 4)]
(AB <- data.frame(ID = c("a1", "a2", "a3", "a4", "a5"),
Age = c(12, 14, 12, 16, 19),
Sex = c("M", "F", "F", "M", "F"),
Y = 11, 14, 15, 12, 19))
(AC <- data.frame(ID = "a9", Age = 14, Sex = "M", Y = 17))
rbind(AB, AC)
(AB <- data.frame(ID = c("a1", "a2", "a3", "a4", "a5"),
Age = c(12, 14, 12, 16, 19),
Sex = c("M", "F", "F", "M", "F"),
Y = 11, 14, 15, 12, 19))
(AC <- data.frame(ID = "a9", Age = 14, Sex = "M", Y = 17))
(AB <- data.frame(ID = c("a1", "a2", "a3", "a4", "a5"),
Age = c(12, 14, 12, 16, 19),
Sex = c("M", "F", "F", "M", "F"),
Y = c(11, 14, 15, 12, 19))
(AB <- data.frame(ID = c("a1", "a2", "a3", "a4", "a5"),
Age = c(12, 14, 12, 16, 19),
Sex = c("M", "F", "F", "M", "F"),
Y = c(11, 14, 15, 12, 19)))
(AB <- data.frame(ID = c("a1", "a2", "a3", "a4", "a5"),
Age = c(12, 14, 12, 16, 19),
Sex = c("M", "F", "F", "M", "F"),
Y = c(11, 14, 15, 12, 19)))
(AC <- data.frame(ID = "a9", Age = 14, Sex = "M", Y = 17))
rbind(AB, AC)
(AB <- data.frame(ID = c("a1", "a2", "a3", "a4", "a5"),
Age = c(12, 14, 12, 16, 19),
Sex = c("M", "F", "F", "M", "F"),
Y = c(11, 14, 15, 12, 19)))
(AC <- data.frame(ID = "a9", Age = 14, Sex = "M", Y = 17))
rbind(AB, AC)
as.matrix(AB)
data.matrix(AB)
(AB2 <- rbind(AB, AC))
AB2$status <- rep(c("Z", "V"), 5)
AB2$status <- rep(c("Z", "V"), 2)
AB2$status <- rep(c("Z", "V"), 3)
AB2
plot(c(1, 21), c(1, 2.3),
type = "n", axes = FALSE, ann = FALSE)
## show pch
points(1:20, rep(1, 20), pch = 1:20)
text(1:20, 1.2, labels = 1:20)
text(11, 1.5, "pch", cex = 1.3)
## show colors for rainbow palette
points(1:20, rep(2, 20), pch = 16, col = rainbow(20))
text(11, 2.2, "col", cex = 1.3)
plot(c(0.2, 5), c(0.2, 5), type = "n", ann = FALSE, axes = FALSE)
for(i in 1:6) {
abline(0, i/3, lty = i, lwd = 2)
text(2, 2 * (i/3), labels = i, pos = 3)
}
runif(4)
set.seed(198)
runif(4)
set.seed(2) ## for reproducibility
x <- 1:10
y <- 2 * x + rnorm(length(x))
plot(x, y, xlab = "This is the label for the x axis",
ylab = "Label for the y axis")
## And now, we add a horizontal line:
abline(h = 5, lty = 2)
plot(c(1, 21), c(1, 2.3),
type = "b", axes = FALSE, ann = FALSE)
plot(c(1, 21), c(1, 2.3),
type = "n", axes = FALSE, ann = FALSE)
plot(c(0.2, 5), c(0.2, 5), type = "n", ann = FALSE, axes = FALSE)
plot(c(0.2, 5), c(0.2, 5), type = "b", ann = FALSE, axes = FALSE)
plot(c(1, 21), c(1, 2.3),
type = "n", axes = FALSE, ann = FALSE)
## show pch
points(1:20, rep(1, 20), pch = 1:20)
text(1:20, 1.2, labels = 1:20)
text(11, 1.5, "pch", cex = 1.3)
## show colors for rainbow palette
points(1:20, rep(2, 20), col = rainbow(20))
text(11, 2.2, "col", cex = 1.3)
plot(c(0.2, 5), c(0.2, 5), type = "b", ann = FALSE, axes = FALSE)
for(i in 1:6) {
abline(0, i/3, lty = i, lwd = 2)
text(2, 2 * (i/3), labels = i, pos = 3)
}
plot(c(0.2, 5), c(0.2, 5), type = "n", ann = FALSE, axes = FALSE)
for(i in 1:6) {
abline(0, i/3, lty = i, lwd = 2)
text(2, 2 * (i/3), labels = i, pos = 3)
}
?ann
?plot
table(AB2$Sex)
with(AB2, table(Sex, status)) ## note "with"
xtabs( ~ Sex + status, data = AB2)
table(AB2$Sex, AB2$status)
with(AB2, table(Sex, status)) ## note "with"
xtabs( ~ Sex + status, data = AB2)
table(AB)
(dfx <- as.data.frame(table(x)))
xtabs(Freq ~ a + b + c, data = dfx)
(x <-  data.frame(a = c(1,2,2,1,2,2,1),
b = c(1,2,2,1,1,2,1),
c = c(1,1,2,1,2,2,1)))
## Equivalent
table(x)
xtabs(~ a + b + c, data = x)
(dfx <- as.data.frame(table(x)))
xtabs(Freq ~ a + b + c, data = dfx)
(one.dataframe <- data.frame(age = c(12, 13, 16, 25, 28),
sex = factor(c("male", "female",
"female", "male", "male")))
)
one.dataframe <- rbind(one.dataframe, one.dataframe)
tapply(one.dataframe$age,
list(one.dataframe$sex, one.dataframe$country),
mean)
one.dataframe$age[6:10] <- one.dataframe$age[6:10] + 2
one.dataframe$country <- rep(c("A", "B"), c(5, 5))
one.dataframe$Y <- rnorm(10)
one.dataframe
tapply(one.dataframe$age, one.dataframe$sex, mean)
tapply(one.dataframe$age,
list(one.dataframe$sex, one.dataframe$country),
mean)
split(one.dataframe, one.dataframe$sex)
x <- y <- 0
iteration <- 1
while( (x < 10) && (y < 2)) {
cat(" ... iteration", iteration, "\n")
x <- x + runif(1)
y <- y + rnorm(1)
iteration <- iteration + 1
}
x
y
iteration <- 0
while(TRUE) {
iteration <- iteration + 1
cat(" ... iteration", iteration, "\n")
x <- rnorm(1, mean = 5)
y <- rnorm(1, mean = 7)
z <- x * y
if (z < 15) break
}
iteration <- 0
while(TRUE) {
iteration <- iteration + 1
cat(" ... iteration", iteration, "\n")
x <- rnorm(1, mean = 5)
y <- rnorm(1, mean = 7)
z <- x * y
if (z < 15) { break }
}
iteration <- 0
while(TRUE) {
iteration <- iteration + 1
cat(" ... iteration", iteration, "\n")
x <- rnorm(1, mean = 5)
y <- rnorm(1, mean = 7)
z <- x * y
if (z < 15) { break }
}
iteration <- 0
while(TRUE) {
iteration <- iteration + 1
cat(" ... iteration", iteration, "\n")
x <- rnorm(1, mean = 5)
y <- rnorm(1, mean = 7)
z <- x * y
if (z < 15) { break }
}
iteration <- 0
while(TRUE) {
iteration <- iteration + 1
cat(" ... iteration", iteration, "\n")
x <- rnorm(1, mean = 5)
y <- rnorm(1, mean = 7)
z <- x * y
if (z < 15) { break }
}
iteration <- 0
while(TRUE) {
iteration <- iteration + 1
cat(" ... iteration", iteration, "\n")
x <- rnorm(1, mean = 5)
y <- rnorm(1, mean = 7)
z <- x * y
if (z < 15) { break }
}
iteration <- 0
while(TRUE) {
iteration <- iteration + 1
cat(" ... iteration", iteration, "\n")
x <- rnorm(1, mean = 5)
y <- rnorm(1, mean = 7)
z <- x * y
if (z < 15) { break }
}
iteration <- 0
while(TRUE) {
iteration <- iteration + 1
cat(" ... iteration", iteration, "\n")
x <- rnorm(1, mean = 5)
y <- rnorm(1, mean = 7)
z <- x * y
if (z < 15) { break }
}
iteration <- 0
while(TRUE) {
iteration <- iteration + 1
cat(" ... iteration", iteration, "\n")
x <- rnorm(1, mean = 5)
y <- rnorm(1, mean = 7)
z <- x * y
if (z < 15) { break }
}
iteration <- 0
while(TRUE) {
iteration <- iteration + 1
cat(" ... iteration", iteration, "\n")
x <- rnorm(1, mean = 5)
y <- rnorm(1, mean = 7)
z <- x * y
if (z < 15) { break }
}
plotAndSummary <- function(x) {
plot(x)
print(summary(x))
}
x <- rnorm(50)
plotAndSummary(x)
plotAndLm <- function(x, y, title = "A figure") {
lm1 <- lm(y ~ x)
cat("\n Printing the summary of x\n")
print(summary(x))
cat("\n Printing the summary of y\n")
print(summary(y))
cat("\n Printing the summary of the linear regression\n")
print(summary(lm1))
plot(y ~ x, main = title)
abline(lm1)
return(lm1)
}
x <- 1:20
y <- 5 + 3 *x + rnorm(20, sd = 3)
plotAndLm(x, y)
plotAndLm(x, y, title = "A user specified title")
f1 <- function(x) {
x + z
}
z <- -100
f11 <- function(y) {
z <- 10
f1(y)
}
f11(4)
v <- 1000
f3 <- function(x, y) {
v <- 3 * x
f2 <- function(u) {
u + v
}
f2(y)
}
f3(2, 9)
search()
i <- 2
local({cat("i ", i); i <- 99; cat(";  i = ", i)})
i
f1 <- function(x) 3 * x
f2 <- function(x) 5 + f1(x)
f3 <- function(z, u) {
v <- runif(z)
a <- f2(u)
b <- f2(3 * v)
return(a + b)
}
f3(3, 7)
f3(-5, 6)
traceback()
f3(5, "a")
traceback()
as.list(body(lm))
trace(lm, tracer = browser, at = 5)
y <- runif(100)
x <- 1:100
lm(y ~ x)
untrace(lm)
setwd("~/GitHub/apuntes-bioinfo/Estadistica-R/ejercicios")
##1. The data
#Read the data “leukemia.data.txt”. Note that there are row names that we do not want to be
#part of the data itself (look at the help for “read.table”, the option “row.names”). Call this
#“leuk.dat” These data are based on the famous leukemia data from Golub et al. I’ve modified a few things
#below: the gene names and the sex of the patients are invented.
leuk.dat <- read.table('data/leukemia.data.txt', row.names = NULL)
leuk.dat
#That will be a data frame. For most figures your life will be simpler if you convert it into a
#matrix, using data.matrix. Call this data matrix “leuk.dat.m”. (Why is it a good idea to
#convert this into a matrix? Try doing the figures using the original data frame.)
leuk.dat.m <- data.matrix(leuk.dat)
#Read the data “leukemia.class.txt”. Use scan for this (do you know why?). Since these are
#labels, use what = "" or what = character() in the call to scan. Convert the
#classes into a factor. Call this “leuk.class”.
leuk.class <- scan(file = 'data/leukemia.class.txt' , what = "")
leuk.class <- factor(leuk.class)
leuk.class
#Create a vector for the sex of the patients. The patients are Male and Female, alternating,
#and staring with Male. Call this factor “sex”.
sex <- factor(rep(c("Male", "Female"), length.out = 38))
sex
## 2. The boxplot of PTEN and scatterplots with lots of info
boxplot(leuk.dat[2124, ])
## 2. The boxplot of PTEN and scatterplots with lots of info
boxplot.data <- leuk.dat[2124, ]
boxplot.data
boxplot(boxplot.data ~ leuk.class)
leuk.class
## 2. The boxplot of PTEN and scatterplots with lots of info
boxplot.data <- leuk.dat[2124, 2:39]
boxplot(boxplot.data ~ leuk.class)
boxplot.data
boxplot(boxplot.data ~ leuk.class)
## 2. The boxplot of PTEN and scatterplots with lots of info
boxplot.data <- vector(leuk.dat[2124, 2:39])
boxplot(leuk.class, boxplot.data, col = c('orange', 'lightblue'))
## 2. The boxplot of PTEN and scatterplots with lots of info
boxplot.data <- leuk.dat.m[2124, ]
boxplot(leuk.class, boxplot.data, col = c('orange', 'lightblue'))
boxplot(boxplot.data ~ leuk.class, col = c('orange', 'lightblue'))
## 2. The boxplot of PTEN and scatterplots with lots of info
boxplot.data <- leuk.dat.m[2124, 2:39]
boxplot(boxplot.data ~ leuk.class, col = c('orange', 'lightblue'))
?boxplot
boxplot(boxplot.data ~ leuk.class, col = c('orange', 'lightblue'),
xlab = 'Patient groups', ylab = 'Gene expression (mRNA)')
?boxplot
title('Boxplot of PTEN by patient group')
## 2. The boxplot of PTEN and scatterplots with lots of info
#The boxplot
pten_genedata <- leuk.dat.m[2124, 2:39]
boxplot(pten_genedata ~ leuk.class, col = c('orange', 'lightblue'),
xlab = 'Patient groups', ylab = 'Gene expression (mRNA)')
title('Boxplot of PTEN by patient group')
third_genedata <- leuk.dat.m[2600, 2:39]
plot(hk1_genedata ~ pten_genedata)
#PTEN, HK-1, a third gene, patient status, and some sex
hk1_genedata <- leuk.dat.m[1, 2:39]
third_genedata <- leuk.dat.m[2600, 2:39]
plot(hk1_genedata ~ pten_genedata)
?plot
plot(hk1_genedata ~ pten_genedata, col = sex)
legend()
plot(hk1_genedata ~ pten_genedata, col = sex)
legend()
legend(col = sex)
plot(hk1_genedata ~ pten_genedata, col = sex)
legend(col = sex)
plot(hk1_genedata ~ pten_genedata, col = c('blue', 'red')[leuk.class])
plot(hk1_genedata ~ pten_genedata, col = c('lightblue', 'red')[leuk.class])
plot(hk1_genedata ~ pten_genedata, col = c('blue', 'red')[leuk.class])
plot(hk1_genedata ~ pten_genedata, col = c('blue', 'red')[leuk.class],
pch = c(21, 24)[sex])
plot(hk1_genedata ~ pten_genedata, col = c('blue', 'red')[leuk.class],
pch = c(21, 24)[sex],
xlab = 'PTEN', ylab = 'HK-1')
plot(hk1_genedata ~ pten_genedata, col = c('blue', 'red')[leuk.class],
pch = c(21, 24)[sex],
xlab = 'PTEN', ylab = 'HK-1',
main ='HK-1 vs. PTEN; symbol size proportional to gene 2600')
?legend()
plot(hk1_genedata ~ pten_genedata, col = c('blue', 'red')[leuk.class],
pch = c(21, 24)[sex],
xlab = 'PTEN', ylab = 'HK-1',
main ='HK-1 vs. PTEN; symbol size proportional to gene 2600')
legend(1, 1)
legend(1, 1, legend)
text.legend <- paste(rep(factor(leuk.class), c(2,2)), rep(factor(sex), 2), sep = ',')
text.legend <- paste(rep(levels(leuk.class), c(2,2)), rep(levels(sex), 2), sep = ',')
legend(1, 1, legend = )
legend(1, 1, legend = text.legend)
legend(0, 0, legend = text.legend)
plot(hk1_genedata ~ pten_genedata, col = c('blue', 'red')[leuk.class],
pch = c(21, 24)[sex],
xlab = 'PTEN', ylab = 'HK-1',
main ='HK-1 vs. PTEN; symbol size proportional to gene 2600')
text.legend <- paste(rep(levels(leuk.class), c(2,2)), rep(levels(sex), 2), sep = ',')
legend(0, 0, legend = text.legend)
legend(0, 0, legend = text.legend,
pch = c(21, 24)[sex],
col = c('blue', 'red')[leuk.class])
plot(hk1_genedata ~ pten_genedata, col = c('blue', 'red')[leuk.class],
pch = c(21, 24)[sex],
xlab = 'PTEN', ylab = 'HK-1',
main ='HK-1 vs. PTEN; symbol size proportional to gene 2600')
text.legend <- paste(rep(levels(leuk.class), c(2,2)), rep(levels(sex), 2), sep = ',')
legend(0, 0, legend = text.legend,
pch = c(21, 24)[sex],
col = c('blue', 'red')[leuk.class])
plot(hk1_genedata ~ pten_genedata, col = c('blue', 'red')[leuk.class],
pch = c(21, 24)[sex],
xlab = 'PTEN', ylab = 'HK-1',
main ='HK-1 vs. PTEN; symbol size proportional to gene 2600')
text.legend <- paste(rep(levels(leuk.class), c(2,2)), rep(levels(sex), 2), sep = ',')
legend(0, 0, legend = text.legend,
col = c('blue', 'red')[leuk.class],
pch = c(21, 24)[sex])
plot(hk1_genedata ~ pten_genedata, col = c('blue', 'red')[leuk.class],
pch = c(21, 24)[sex],
xlab = 'PTEN', ylab = 'HK-1',
main ='HK-1 vs. PTEN; symbol size proportional to gene 2600')
lclass <- rep(levels(leuk.class), rep(2, 2))
lsex <- rep(levels(sex), 2)
text.legend <- paste(lclass, lsex, sep = ", ")
legend(-1, 1, legend = text.legend,
pch = c(21, 24)[factor(lsex)],
col = diverge_hcl(2)[factor(lclass)])
## 2. The boxplot of PTEN and scatterplots with lots of info
library(colorspace)
plot(hk1_genedata ~ pten_genedata, col = c('blue', 'red')[leuk.class],
pch = c(21, 24)[sex],
xlab = 'PTEN', ylab = 'HK-1',
main ='HK-1 vs. PTEN; symbol size proportional to gene 2600')
lclass <- rep(levels(leuk.class), rep(2, 2))
lsex <- rep(levels(sex), 2)
text.legend <- paste(lclass, lsex, sep = ", ")
legend(-1, 1, legend = text.legend,
pch = c(21, 24)[factor(lsex)],
col = diverge_hcl(2)[factor(lclass)])
for.cex <- leuk.dat.m[2600, ] - min(leuk.dat.m[2600, ]) + 1
the.cex <- 2 * for.cex/max(for.cex)
plot(hk1_genedata ~ pten_genedata, col = c('blue', 'red')[leuk.class],
pch = c(21, 24)[sex], cex = the.cex
xlab = 'PTEN', ylab = 'HK-1',
plot(hk1_genedata ~ pten_genedata, col = c('blue', 'red')[leuk.class],
pch = c(21, 24)[sex], cex = the.cex,
xlab = 'PTEN', ylab = 'HK-1',
main ='HK-1 vs. PTEN; symbol size proportional to gene 2600')
for.cex <- leuk.dat.m[2600, ] - min(leuk.dat.m[2600, ]) + 1
the.cex <- 2 * for.cex/max(for.cex)
plot(hk1_genedata ~ pten_genedata, col = c('blue', 'red')[leuk.class],
pch = c(21, 24)[sex], cex = the.cex,
xlab = 'PTEN', ylab = 'HK-1',
main ='HK-1 vs. PTEN; symbol size proportional to gene 2600')
lclass <- rep(levels(leuk.class), rep(2, 2))
for.cex <- leuk.dat.m[2600, ] - min(leuk.dat.m[2600, ]) + 1
the.cex <-   2 * for.cex/max(for.cex)
plot(hk1_genedata ~ pten_genedata, col = c('blue', 'red')[leuk.class],
pch = c(21, 24)[sex], cex = the.cex,
xlab = 'PTEN', ylab = 'HK-1',
main ='HK-1 vs. PTEN; symbol size proportional to gene 2600')
abline(lm(leuk.dat.m[1, ] ~ leuk.dat.m[2124, ]), lty = 2)
for.cex <- leuk.dat.m[2600, 2:39] - min(leuk.dat.m[2600, 2:39]) + 1
the.cex <-   2 * for.cex/max(for.cex)
plot(hk1_genedata ~ pten_genedata, col = c('blue', 'red')[leuk.class],
pch = c(21, 24)[sex], cex = the.cex,
xlab = 'PTEN', ylab = 'HK-1',
main ='HK-1 vs. PTEN; symbol size proportional to gene 2600')
lclass <- rep(levels(leuk.class), rep(2, 2))
lsex <- rep(levels(sex), 2)
text.legend <- paste(lclass, lsex, sep = ", ")
legend(-1, 1, legend = text.legend,
pch = c(21, 24)[factor(lsex)],
col = diverge_hcl(2)[factor(lclass)])
abline(lm(leuk.dat.m[1, ] ~ leuk.dat.m[2124, ]), lty = 2)
abline(lm(leuk.dat.m[1, 2:39] ~ leuk.dat.m[2124, 2:39]), lty = 2)
for.cex <- leuk.dat.m[2600, 2:39] - min(leuk.dat.m[2600, 2:39]) + 1
the.cex <-   2 * for.cex/max(for.cex)
plot(hk1_genedata ~ pten_genedata, col = c('blue', 'red')[leuk.class],
pch = c(21, 24)[sex], cex = the.cex,
xlab = 'PTEN', ylab = 'HK-1',
main ='HK-1 vs. PTEN; symbol size proportional to gene 2600')
lclass <- rep(levels(leuk.class), rep(2, 2))
lsex <- rep(levels(sex), 2)
text.legend <- paste(lclass, lsex, sep = ", ")
legend(-1, 1, legend = text.legend,
pch = c(21, 24)[factor(lsex)],
col = diverge_hcl(2)[factor(lclass)])
abline(lm(leuk.dat.m[1, 2:39] ~ leuk.dat.m[2124, 2:39]), lty = 2)
