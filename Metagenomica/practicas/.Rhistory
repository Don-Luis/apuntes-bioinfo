setwd("~/Documents/GitHub/metag/metag")
load("~/Documents/GitHub/metag/metag/.RData")
print("Total Reads")
sum(out[,2])
#Modelo para las lecturas forward
errF <- learnErrors(filtFs,multithread=TRUE, nbases=130000000) #half of total bases
#Recomendable poner un título a cada bloque de código
library(dada2) #librería con la que se determinan SV
library (ggplot2)
library(plotly) #librería que genera una máscara encima de cualquier objeto ggplot para que el gráfico sea interactivo
library(DECIPHER) #analizar disparidad entre secuencias
library(ShortRead) #interpretación archivos fasta
library(Biostrings)
library(readr) #parte de tidyverse para la interpretación de dataframes
library("phyloseq") #integración de datos y hacer todos los gráficos
library("DESeq2") #permite ver qué bacterias son las enriquecidas en una muestra con respecto a otra; calcular diversidad
library("tibble")
library("dplyr")
library("tidyr")
library(openssl) #for the codification of ASVs nucleotide sequence into a shorter string (ASVs names)
library("vegan") #hacer estudios de diversidad
library("microbiome") #estudios de diversidad
library("hrbrthemes") #scales in plots of ggplot
library("RColorBrewer") #paletas de colores de degradados
library("data.table")#conversiones en dataframes que no son posibles en dplyr
#Modelo para las lecturas forward
errF <- learnErrors(filtFs,multithread=TRUE, nbases=130000000) #half of total bases
load("dadaobjects.Rdata")
load("dadaobjects.RData")
load("dadaobjects.RData")
plotErrors(errF, nominalQ=TRUE)
plotErrors(errR, nominalQ=TRUE)
print("Forward Reads")
dadaFs
print("Reverse Reads")
dadaRs
mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose=TRUE)
setwd("~/Documents/GitHub/metag/metag")
mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose=TRUE)
update.packages("dada2")
update.package("dada2")
#Recomendable poner un título a cada bloque de código
library(dada2) #librería con la que se determinan SV
library (ggplot2)
library(plotly) #librería que genera una máscara encima de cualquier objeto ggplot para que el gráfico sea interactivo
library(DECIPHER) #analizar disparidad entre secuencias
library(ShortRead) #interpretación archivos fasta
library(Biostrings)
library(readr) #parte de tidyverse para la interpretación de dataframes
library("phyloseq") #integración de datos y hacer todos los gráficos
library("DESeq2") #permite ver qué bacterias son las enriquecidas en una muestra con respecto a otra; calcular diversidad
library("tibble")
library("dplyr")
library("tidyr")
library(openssl) #for the codification of ASVs nucleotide sequence into a shorter string (ASVs names)
library("vegan") #hacer estudios de diversidad
library("microbiome") #estudios de diversidad
library("hrbrthemes") #scales in plots of ggplot
library("RColorBrewer") #paletas de colores de degradados
library("data.table")#conversiones en dataframes que no son posibles en dplyr
mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose=TRUE)
#Modelo para las lecturas forward
errF <- learnErrors(filtFs,multithread=TRUE, nbases=130000000) #half of total bases
#Coge como input los archivos filtrados
#Multithread TRUE no sirve para Windows, habría que cambiarlo
#nbases es una decisión que hay que tomar para ver cuántos nucleótidos se van a analizar. Se recomienda la mitad o un cuarto de los nucleótidos en la población muestral, depende de las ganas que tengamos a esperar. Cuanto más pequeño sea el modelo, menor diversidad y menor fiabilidad.
#Hay un parámetro que indica si coge las lecturas al azar. Esto sería interesante para no coger solo lecturas de los primeros archivos, si no de todos.
#Recomendable poner un título a cada bloque de código
library(dada2) #librería con la que se determinan SV
library (ggplot2)
library(plotly) #librería que genera una máscara encima de cualquier objeto ggplot para que el gráfico sea interactivo
library(DECIPHER) #analizar disparidad entre secuencias
library(ShortRead) #interpretación archivos fasta
library(Biostrings)
library(readr) #parte de tidyverse para la interpretación de dataframes
library("phyloseq") #integración de datos y hacer todos los gráficos
library("DESeq2") #permite ver qué bacterias son las enriquecidas en una muestra con respecto a otra; calcular diversidad
library("tibble")
library("dplyr")
library("tidyr")
library(openssl) #for the codification of ASVs nucleotide sequence into a shorter string (ASVs names)
library("vegan") #hacer estudios de diversidad
library("microbiome") #estudios de diversidad
library("hrbrthemes") #scales in plots of ggplot
library("RColorBrewer") #paletas de colores de degradados
library("data.table")#conversiones en dataframes que no son posibles en dplyr
#Modelo para las lecturas reverse
errR <- learnErrors(filtRs, multithread=TRUE, nbases=130000000)
plotErrors(errF, nominalQ=TRUE)
plotErrors(errR, nominalQ=TRUE)
dadaFs <- dada(filtFs, err=errF, multithread=TRUE)
dadaRs <- dada(filtRs, err=errR, multithread=TRUE)
print("Forward Reads")
dadaFs
#en la muestra 7265228 se han encontrado 3366 secuencias con mutaciones o lecturas distintas. Podríamos decir que se trata de SVs, pero todavía no vamos a decirlo porque se debería validar con las lecturas reversas.
print("Reverse Reads")
dadaRs
mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose=TRUE)
# Inspect the merger data.frame from the first sample
head(mergers[[1]][,2:9])
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
head(colnames(seqtab)) #como nombre de columna está una secuencia nucleotídica de la ASV. Antiguamente, se ponía OTU1, OTU2, OTU3, etc. Al correr dos experimentos, la secuencia de OTU1 de un análisis no tiene por qué coincidir con la del otro, por lo que, con la secuencia, no es necesario nombrarlas. Dependiendo de la librería puede merecer o no la pena poner la secuencia, ya que la secuencia puede ser muy larga para poder visualizarse bien. Esto se podría codificar con un hash como MD5.
# Inspect distribution of sequence lengths
table(nchar(getSequences(seqtab)))
seqtab<- seqtab[,nchar(colnames(seqtab)) %in% 393:432]
# Inspect distribution of sequence lengths
table(nchar(getSequences(seqtab)))
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
print("Removing chimera")
dim(seqtab.nochim)
print("Percentage against original sequences")
sum(seqtab.nochim)/sum(seqtab)*100
getN <- function(x) sum(getUniques(x))
track <- cbind(out[,1:2], sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))
# If processing a single sample, remove the sapply calls: e.g. replace sapply(dadaFs, getN) with getN(dadaFs)
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names
track<- as.data.frame(track)
track$conservedperc<-round(with(track, nonchim/input*100),2)
print(track)
summary(track$nonchim)
subset_columns_by_sum_and_rows <- function(df_name, threshold, min_rows_with_value) {
df <- df_name # get dataframe by name
# compute the sum of each column
col_sums <- colSums(df)
# identify columns with sum above the threshold
columns_to_keep <- col_sums >= threshold
# iterate over each column to check if it meets the threshold criteria
for (col_name in names(df)) {
if (!columns_to_keep[col_name]) next # skip columns that are already marked for removal
if (sum(df[, col_name] > 0) < min_rows_with_value) { # check if the column meets the threshold criteria
columns_to_keep[col_name] <- FALSE # mark the column for removal
}
}
# subset dataframe to keep columns with sum above the threshold and the minimum number of rows with non-zero values
df_new <- df[, columns_to_keep]
# output the new dataframe
return(df_new)
}
#raretons
seqtab.nochimfiltered<- subset_columns_by_sum_and_rows(seqtab.nochim,
threshold=round(summary(track$nonchim)[['Mean']]/1000,0),
min_rows_with_value=3)
track$nochimfiltered<-rowSums(seqtab.nochimfiltered)
track$filteredperc<-round(with(track, nochimfiltered/nonchim*100),2)
print(track)
#Let's codify feature names in MD5 to have similar names to those obtained in qiime2
seqtab.nochimmd5 <-seqtab.nochim
sequences <- colnames(seqtab.nochimmd5)
sequencesmd5<-md5(sequences)
colnames(seqtab.nochimmd5)<-sequencesmd5
write.table(t(seqtab.nochimmd5), "seqtab-nochim.txt", sep="\t", row.names=TRUE, col.names=NA, quote=FALSE)
uniquesToFasta(seqtab.nochim, fout='rep-seqs.fna', ids=sequencesmd5)
write.table(t(track), "stats.txt", sep="\t", row.names=TRUE, col.names=NA, quote=FALSE)
#The same code for the filtered table except stats.txt as it's the same
seqtab.nochimfilteredmd5<-seqtab.nochimfiltered
sequencesfiltered<-colnames(seqtab.nochimfilteredmd5)
sequencesfilteredmd5<-md5(sequencesfiltered)
colnames(seqtab.nochimfilteredmd5)<-sequencesfilteredmd5
write.table(t(seqtab.nochimfilteredmd5), "seqtab-nochimfiltered.txt", sep="\t", row.names=TRUE, col.names=NA, quote=FALSE)
uniquesToFasta(seqtab.nochimfiltered, fout='rep-seqs_filtered.fna', ids=sequencesfilteredmd5)
